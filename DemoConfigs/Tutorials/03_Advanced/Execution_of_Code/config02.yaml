# This tutorial gives a more in depth explanation for different ways of executing custom code and when to use wich.
#
#
# 
# Parts of this tutorial:
#     config00.yaml => Basic Setup / Using a Function-Node
#     config01.yaml => using the onChange Node Parameter
#     config02.yaml => using a connection onChange
#     config03.yaml => using a connection with static timings
#
#
################################# using a connection onChange #################################
# 
# 
# 
# The purpose of a connection triggering onChange is to automatically forward changed data.
#
#
# Connections triggering onChange are especially usefull for
#    - reducing unessesary data flow, memory and cpu usage
#    - 'debouncing' signals with inherent instabilities 
#
# It's not usefull for
#    - consistent data flow
#    - mathematical operations depending on older data like integration and differentation, or 
#      mean/median calculation
#
# 
#
#
# For this example we will again use the sine generator from config00. This time however, we will send the
# result to a different node. While we are at it, we might as well multiply the result by 0.5 and add 0.5
# in order to get a signal between 0 and 1.
# Note: In this case we will just use a simple Node, which is just a more complicated way of achieving the
# same result as in config02. However this second node could also be a Modbus/MQTT or any other Node, which
# makes this much more flexible even if slightly more complex. The key difference between onChange Connection
# execution and the onChange Parameter for Nodes, is that connections transfere data between different
# Nodes and might change it thereby, while the onChange Parameter for Nodes was just designed to react to
# given data.
#
# 

import: /home/root/AutomationOne/DemoConfigs/Tutorials/03_Advanced/Execution_of_Code/callback.py

nodes:
  - name: Sine Generator
    type: Function 
    frequency: 2       
    callback: sine

    sine:              
      a: 1             
      b: 0.1           
      c: 0             
    log_value: true

    sensitivity: 0.2               # Only execute an onChange event when the value is changed by at least 0.2
    

  - name: Output Node              # Note that there is no sensitivity specivied for this node. Therefore 
    onChange: log_value            # it uses the default 0, which means every set-value call will result in the
                                   # the call of log_value

connections:
  - name: Connection 1
    inNode: Sine Generator
    outNode: Output Node
    factor: 0.5                    # Multiply the inNode by 0.5
    offset: 0.5                    # and add 0.5 to the result
    execute_on_change: True        # this is default and therefore could be dropped as long as
                                   # no 'frequency' parameter is given


